@page "/serial"
@inject Services.SerialManager serialManager

<h1>Serial Port</h1>

<label>Select Port: </label>
<select class="form-select" name="port" disabled="@inputDisabled" onchange="@OnPortSelect">
    @foreach (var portName in portnames)
    {
        <option 
            value="@portName"
            selected="@(portName == selectedPortName)"
        >@portName</option>
    }
</select>
<br />
<label>Baud-Rate: </label>
<select class="form-select" disabled="@inputDisabled" onchange="@OnBaudRateSelect">
    @foreach (var rate in baudRates)
    {
        <option 
            value="@rate"
            selected="@(rate == selectedBaudRate)"
        >@rate</option>
    }
</select>
<br />
<label>@message</label>
<br />
<div>
    <button type="button" class="btn btn-success" onclick="@RunSerial">Run</button>
    <button type="button" class="btn btn-success" onclick="@StopSerial">Stop</button>
    <button type="button" class="btn btn-error" onclick="@TurnOnLights">Turn on lights</button>
    <button type="button" class="btn btn-error" onclick="@TurnOffLights">Turn off lights</button>
</div>


@code {
    const string STATUS_NOT_OPEN = "Serial port is not open";
    const string STATUS_ERROR = "Error while trying to open serial port";
    const string STATUS_CONNECTED = "Open!";

    private bool inputDisabled = false;

    private int[] baudRates = { 300, 600, 1200, 2400, 4800, 9600, 14400, 19200, 28800, 31250, 38400, 57600, 115200 };
    private string[] portnames;
    private string selectedPortName;
    private int selectedBaudRate;

    private string message = STATUS_NOT_OPEN;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        portnames = serialManager.GetAvailiblePorts();

        // check state of serial port
        if (serialManager.IsOpen())
        {
            selectedPortName = serialManager.GetPortName();
            selectedBaudRate = serialManager.GetBaudRate();
            inputDisabled = true;
            message = STATUS_CONNECTED;
        }
    }

    private void OnPortSelect(ChangeEventArgs e)
    {
        System.Diagnostics.Debug.WriteLine(e.Value.ToString());
        selectedPortName = e.Value.ToString();
    }

    private void OnBaudRateSelect(ChangeEventArgs e)
    {
        System.Diagnostics.Debug.WriteLine(e.Value.ToString());
        selectedBaudRate = Int16.Parse(e.Value.ToString());
    }

    private void RunSerial()
    {
        if (serialManager.IsOpen())
            return;

        if(!serialManager.Initialize(selectedPortName, selectedBaudRate))
        {
            // TODO: Show error message
            message = STATUS_ERROR;
            return;
        }

        // disable buttons
        message = STATUS_CONNECTED;
        inputDisabled = true;
        byte[] messageBytes = { (byte) ww_led_control.Services.SerialManager.Commands.TURN_ON, 0x00, 0x00, 0x00 };
        serialManager.WriteMessage(messageBytes);
    }

    private void TurnOffLights()
    {
        byte[] messageBytes = { (byte) ww_led_control.Services.SerialManager.Commands.TURN_OFF, 0x00, 0x00, 0x00 };
        serialManager.WriteMessage(messageBytes);
    }

    private void TurnOnLights()
    {
        byte[] messageBytes = { (byte)ww_led_control.Services.SerialManager.Commands.TURN_ON, 0x00, 0x00, 0x00 };
        serialManager.WriteMessage(messageBytes);
    }

    private void StopSerial()
    {
        serialManager.Stop();
        message = STATUS_NOT_OPEN;
        inputDisabled = false;
        // Make inputs availible again
    }
}
